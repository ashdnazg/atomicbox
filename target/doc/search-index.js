var searchIndex = JSON.parse('{\
"atomicbox":{"doc":"Safe atomic boxes.","i":[[3,"AtomicBox","atomicbox","A type that holds a single <code>Box<T></code> value and can be safely …",null,null],[3,"Handle","","Opaque handle for the atomic box. This allows users to …",null,null],[8,"HandleReferable","","Trait for values that can be matched against a <code>Handle</code>.",null,null],[16,"Target","","",0,null],[10,"make_handle","","",0,[[],["handle",3]]],[3,"AtomicOptionBox","","A type that holds a single <code>Option<Box<T>></code> value and can …",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",2,[[],["handle",3]]],[11,"default","","The default <code>AtomicBox<T></code> value boxes the default <code>T</code> value.",1,[[],["atomicbox",3]]],[11,"default","","The default <code>AtomicOptionBox<T></code> value is …",3,[[],["atomicoptionbox",3]]],[11,"eq","","",2,[[["handle",3]],["bool",15]]],[11,"ne","","",2,[[["handle",3]],["bool",15]]],[11,"fmt","","The <code>{:?}</code> format of an <code>AtomicBox<T></code> looks like …",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","The <code>{:?}</code> format of an <code>AtomicOptionBox<T></code> looks like …",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"new","","Creates a new <code>AtomicBox</code> with the given value.",1,[[["box",3]],["atomicbox",3]]],[11,"swap","","Atomically set this <code>AtomicBox</code> to <code>other</code> and return the …",1,[[["box",3],["ordering",4]],["box",3]]],[11,"store","","Atomically set this <code>AtomicBox</code> to <code>other</code> and drop its …",1,[[["box",3],["ordering",4]]]],[11,"swap_mut","","Atomically swaps the contents of this <code>AtomicBox</code> with the …",1,[[["box",3],["ordering",4]]]],[11,"into_inner","","Consume this <code>AtomicBox</code>, returning the last box value it …",1,[[],["box",3]]],[11,"get_mut","","Returns a mutable reference to the contained value.",1,[[]]],[11,"load_handle","","Returns a handle that matches the current held box.",1,[[["ordering",4]],["handle",3]]],[11,"load_pointer","","Returns a pointer to the currently held box. Using the …",1,[[["ordering",4]]]],[11,"compare_exchange","","Stores a box into the atomic if the value held by the …",1,[[["box",3],["ordering",4],["handle",3]],[["result",4],["box",3]]]],[11,"compare_exchange_mut","","Stores the new box into the atomic and moves the value in …",1,[[["box",3],["ordering",4],["handle",3]],[["result",4],["handle",3]]]],[11,"compare_exchange_weak","","Stores a box into the atomic if the value held by the …",1,[[["box",3],["ordering",4],["handle",3]],[["result",4],["box",3]]]],[11,"compare_exchange_weak_mut","","Moves the value in the new box into the atomic and move …",1,[[["box",3],["ordering",4],["handle",3]],[["result",4],["handle",3]]]],[11,"new","","Creates a new <code>AtomicOptionBox</code> with the given value.",3,[[["option",4],["box",3]],["atomicoptionbox",3]]],[11,"swap","","Atomically set this <code>AtomicOptionBox</code> to <code>other</code> and return …",3,[[["option",4],["box",3],["ordering",4]],[["option",4],["box",3]]]],[11,"store","","Atomically set this <code>AtomicOptionBox</code> to <code>other</code> and drop the …",3,[[["option",4],["box",3],["ordering",4]]]],[11,"take","","Atomically set this <code>AtomicOptionBox</code> to <code>None</code> and return the…",3,[[["ordering",4]],[["option",4],["box",3]]]],[11,"swap_mut","","Atomically swaps the contents of this <code>AtomicOptionBox</code> …",3,[[["option",4],["ordering",4]]]],[11,"into_inner","","Consume this <code>AtomicOptionBox</code>, returning the last option …",3,[[],[["option",4],["box",3]]]],[11,"get_mut","","Returns a mutable reference to the contained value.",3,[[],["option",4]]],[11,"load_handle","","Returns a handle that matches the current held option.",3,[[["ordering",4]],["handle",3]]],[11,"load_pointer","","Returns a pointer to the currently held box. Using the …",3,[[["ordering",4]]]],[11,"compare_exchange","","Stores a box into the atomic if the value held by the …",3,[[["ordering",4],["option",4],["box",3],["handle",3]],[["result",4],["option",4]]]],[11,"compare_exchange_mut","","Stores an optional box into the atomic and moves the …",3,[[["option",4],["ordering",4],["handle",3]],[["result",4],["handle",3]]]],[11,"compare_exchange_weak","","Stores an optional box into the atomic if the value held …",3,[[["ordering",4],["option",4],["box",3],["handle",3]],[["result",4],["option",4]]]],[11,"compare_exchange_weak_mut","","Stores an optional box into the atomic and moves the …",3,[[["option",4],["ordering",4],["handle",3]],[["result",4],["handle",3]]]]],"p":[[8,"HandleReferable"],[3,"AtomicBox"],[3,"Handle"],[3,"AtomicOptionBox"]]}\
}');
initSearch(searchIndex);